open import Shim
open import Cat.Cartesian
open import Presheaf as _
open import Functor.LaxMonoidalSemicomonad
module bounded-lob
  {l m n}
  (C : CartesianCat l m n)
  (F : LaxMonoidalSemicomonad l m n C)
  where

private module C = CartesianCat C
private module ‚ñ° = LaxMonoidalSemicomonad F
open import Presheaf.Hom C.cat
open C
open ‚ñ° using () renaming (run to ‚ñ° ; cojoin to quot)

module setup
  {p} (Pred : C.Obj -> Type p)
  (Œ£* : ‚àÄ c -> Pred c -> C.Obj)
  (X : C.Obj)
  (is-short : Pred (‚ñ° X))
  {vs} (is-very-short : ùüô ~> X -> Type vs)
  {vvs} (is-very-very-short : ùüô ~> X -> Type vvs)
  {vvvs} (is-very-very-very-short : ‚àÄ {a} -> (ùüô ~> a) -> Type vvvs)
  (reflect : ‚àÉ[ t ‚àà ùüô ~> X ] is-very-short t -> ùüô ~> Œ£* (‚ñ° X) is-short)
  where

  import loopy C (‚àô~> X) as loopy
  private module loopy-setup = loopy.setup is-very-short (Œ£* (‚ñ° X) is-short) reflect
  open loopy-setup public using (Fixpoint ; module notations)

  module conditions‚ÇÅ
    (s : C.Obj) -- s ~ Œ£* (‚ñ°(s ~> X)) Œª{ m -> Œ†[ s‚ÇÄ : ùüô ~> s ] ((s‚ÇÄ ‚®æ m) ‚ü´ is-short) }
    (pack : ‚àÉ[ f ‚àà s ~> X ] ((s‚ÇÄ : ùüô ~> s) -> is-very-very-very-short s‚ÇÄ -> is-very-very-short (s‚ÇÄ ‚®æ f)) -> ùüô ~> s)
    (qual : ‚àÄ ((t ‚ñ∑ p) : ‚àÉ[ t ‚àà s ~> X ] ((s‚ÇÄ : ùüô ~> s) -> is-very-very-very-short s‚ÇÄ -> is-very-very-short (s‚ÇÄ ‚®æ t))) -> is-very-short (pack (t ‚ñ∑ p) ‚®æ t))
    where

    P : s ~> X -> Type (m ‚äî vvs ‚äî vvvs)
    P f = ‚àÄ (s‚ÇÄ : ùüô ~> s) -> is-very-very-very-short s‚ÇÄ -> is-very-very-short (s‚ÇÄ ‚®æ f)

    private module loopy-conditions‚ÇÅ = loopy-setup.conditions‚ÇÅ s P pack qual
    open loopy-conditions‚ÇÅ public using (introspect)

    module conditions‚ÇÇ
      (key : s ~> Œ£* (‚ñ° X) is-short)
      (key-law : ‚àÄ {(t ‚ñ∑ p) : ‚àÉ[ t ‚àà s ~> X ] P t} -> (pack (t ‚ñ∑ p) ‚®æ key) ‚âà reflect (introspect (t ‚ñ∑ p)))

      (f : Œ£* (‚ñ° X) is-short ~> X)
      where

      private module loopy-conditions‚ÇÇ = loopy-conditions‚ÇÅ.conditions‚ÇÇ key key-law f
      open loopy-conditions‚ÇÇ public using (t)

      module theorem
        (p : P t)
        where

        private module loopy-theorem = loopy-conditions‚ÇÇ.theorem p
        open loopy-theorem public using (fixpt)
