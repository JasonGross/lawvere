open import Shim
open import Cat
open import Cat.Cartesian
open import Presheaf as _
open import Functor.LaxMonoidalSemicomonad
module lob
  {l m n}
  (C : CartesianCat l m n)
  (F : LaxMonoidalSemicomonad l m n C)
  where

private module C = CartesianCat C
private module ‚ñ° = LaxMonoidalSemicomonad F
open import Presheaf.Hom C.cat
open C
open ‚ñ° using () renaming (run to ‚ñ° ; cojoin to quot)

module setup
  (x : C.Obj)

  (s : C.Obj)

  (pack : (‚ñ° s ~> x) -> ùüô ~> ‚ñ° s)
  where

  import singleton C (‚àô~> x) as loopy-singleton
  private module loopy-setup = loopy-singleton.setup (‚ñ° x) (Œª{ f -> ‚ñ°.ùüô-codistr ‚®æ ‚ñ°.map f }) (‚ñ° s) pack
  open loopy-setup public using (Fixpoint ; introspect)
  module notations where
    chain : ‚àÄ {a1 a2} {f g : a1 ~> a2} -> f ‚âà g -> f ‚âà g
    chain x = x

    syntax chain {f = f} pf = f =[ pf ]=

    _[‚ñ†] : ‚àÄ {a1 a2} (f : a1 ~> a2) -> f ‚âà f
    f [‚ñ†] = Œπ‚ÇÇ
  open notations

  module conditions
    (unpack : (s √ó ‚ñ° s) ~> x)
    (unpack-point-surjection : ‚àÄ {f : ‚ñ° s ~> x} {g : ùüô ~> ‚ñ° (‚ñ° s)}
      -> (dup ‚®æ ((pack f √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack))) ‚âà (g ‚®æ ‚ñ°.map f))
    (f : ‚ñ° x ~> x)
    where

    key : ‚ñ° s ~> ‚ñ° x
    key = dup ‚®æ ((Œπ √ó√ó quot) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack))

    key-law : ‚àÄ {t : ‚ñ° s ~> x} -> (pack t ‚®æ key) ‚âà (‚ñ°.ùüô-codistr ‚®æ ‚ñ°.map (introspect t))
    key-law {t}
      = (pack t ‚®æ (dup ‚®æ ((Œπ √ó√ó quot) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack))))             =[ ‚®æ‚®æ ‚®æ‚ÇÇ (dup‚®æ ‚®æ‚Ä≤^ _) ‚®æ‚ÇÇ (√∑‚ÇÇ ‚®æ‚®æ) ]=
     ‚®æ‚ÇÇ (dup ‚®æ ((pack t √ó√ó pack t) ‚®æ ((Œπ √ó√ó quot) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack)))) =[ _ ^‚®æ‚Ä≤ (‚®æ‚®æ ‚®æ‚ÇÇ (√ó√ó‚®æ ‚®æ‚Ä≤^ _)) ]=
     ‚®æ‚ÇÇ (dup ‚®æ (((pack t ‚®æ Œπ) √ó√ó (pack t ‚®æ quot)) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack)))  =[ _ ^‚®æ‚Ä≤ ((‚®æŒπ √ó√ó‚Ä≤^ _) ‚®æ‚Ä≤^ _) ]=
     ‚®æ‚ÇÇ (dup ‚®æ ((pack t √ó√ó (pack t ‚®æ quot)) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack)))        =[ unpack-point-surjection ]=
     ‚®æ‚ÇÇ ((pack t ‚®æ quot) ‚®æ ‚ñ°.map t)                =[ ‚ñ°.map-cojoin ‚®æ‚Ä≤^ _ ]=
     ‚®æ‚ÇÇ ((‚ñ°.ùüô-codistr ‚®æ ‚ñ°.map (pack t)) ‚®æ ‚ñ°.map t) =[ √∑‚ÇÇ ‚®æ‚®æ ]=
     ‚®æ‚ÇÇ (‚ñ°.ùüô-codistr ‚®æ (‚ñ°.map (pack t) ‚®æ ‚ñ°.map t)) =[ _ ^‚®æ‚Ä≤ ‚ñ°.map‚®æ ]=
     ‚®æ‚ÇÇ (‚ñ°.ùüô-codistr ‚®æ ‚ñ°.map (pack t ‚®æ t))          [‚ñ†]

    module loopy-conditions = loopy-setup.conditions key key-law f
    open loopy-conditions public using (t ; fixpt)
