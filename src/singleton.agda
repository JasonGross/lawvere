open import Shim
open import Cat.Cartesian
open import Presheaf as _
open CartesianCat using (cat)
module singleton
  {l m n sl sm}
  (C : CartesianCat l m n)
  (A : Presheaf l m n sl sm (C .cat))
  where

import loopy C A as loopy

private module C = CartesianCat C
private module A = Presheaf A
open C hiding (Obj)
open A using (_¬ª_)

module setup
  (a : C.Obj)
  (reflect : A.Run.Obj ùüô -> ùüô ~> a)

  (s : C.Obj)

  (pack : A.Run.Obj s -> ùüô ~> s)
  where

  private module loopy-setup = loopy.setup (Œª{ _ -> ‚ä§ {lzero} }) a (Œª{ (x ‚ñ∑ _) -> reflect x })
  open loopy-setup public using (module notations)

  Fixpoint : A.Run.Obj a -> Type (sl ‚äî sm)
  Fixpoint f = ‚àÉ[ x ‚àà A.Run.Obj ùüô ] (x A.‚âà (reflect x ¬ª f))

  private module loopy-conditions‚ÇÅ = loopy-setup.conditions‚ÇÅ s (Œª{ _ -> ‚ä§ {lzero} }) (Œª{ (x ‚ñ∑ _) -> pack x }) (Œª{ _ -> ‚ãÜ })

  introspect : A.Run.Obj s -> A.Run.Obj ùüô
  introspect t = fst (loopy-conditions‚ÇÅ.introspect (t ‚ñ∑ ‚ãÜ))

  module conditions
    (key : s ~> a)
    (key-law : ‚àÄ {t : A.Run.Obj s} -> (pack t ‚®æ key) ‚âà reflect (introspect t))

    (f : A.Run.Obj a)
    where

    private module loopy-conditions‚ÇÇ = loopy-conditions‚ÇÅ.conditions‚ÇÇ key key-law f
    open loopy-conditions‚ÇÇ public using (t)

    private module loopy-theorem = loopy-conditions‚ÇÇ.theorem ‚ãÜ

    fixpt : Fixpoint f
    fixpt = fst (fst loopy-theorem.fixpt) ‚ñ∑ loopy-theorem.fixpt.proof
