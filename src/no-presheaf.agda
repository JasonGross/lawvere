open import Shim
open import Cat
open import Cat.Cartesian
open CartesianCat using (cat)
module no-presheaf
  {l m n}
  (C : CartesianCat l m n)
  where

open import Presheaf.Hom (C .cat)
private module C = CartesianCat C
open C

module setup
  (a : C.Obj)
  {q} (Q : ùüô ~> a ‚Üí Type q)
  where

  import loopy C (‚àô~> a) as loopy
  private module loopy-setup = loopy.setup Q a fst
  open loopy-setup public using (Fixpoint ; module notations)

  module conditions‚ÇÅ
    (s : C.Obj)
    {p} (P : s ~> a ‚Üí Type p)

    (pack : ‚àÉ[ t ‚àà s ~> a ] P t ‚Üí ùüô ~> s)
    (qual : ‚àÄ ((t ‚ñ∑ p) : ‚àÉ[ t ‚àà s ~> a ] P t) ‚Üí Q (pack (t ‚ñ∑ p) ‚®æ t))
    where

    private module loopy-conditions‚ÇÅ = loopy-setup.conditions‚ÇÅ s P pack qual
    open loopy-conditions‚ÇÅ public using (introspect)

    module conditions‚ÇÇ
      (key : s ~> a)
      (key-law : ‚àÄ {(t ‚ñ∑ p) : ‚àÉ[ t ‚àà s ~> a ] P t} ‚Üí (pack (t ‚ñ∑ p) ‚®æ key) ‚âà fst (introspect (t ‚ñ∑ p)))

      (f : a ~> a)
      where

      private module loopy-conditions‚ÇÇ = loopy-conditions‚ÇÅ.conditions‚ÇÇ key key-law f
      open loopy-conditions‚ÇÇ public using (t)

      module theorem
        (p : P t)
        where

        private module loopy-theorem = loopy-conditions‚ÇÇ.theorem p
        open loopy-theorem public using (fixpt)
