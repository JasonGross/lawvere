open import Shim
open import Cat.Cartesian
open import Functor.LaxMonoidalSemicomonad
module diagonal-from-lob-with-universe
  {l m n}
  (C : CartesianCat l m n)
  (F : LaxMonoidalSemicomonad l m n C)
  where

import lob C F as lob

private module C = CartesianCat C
private module ‚ñ° = LaxMonoidalSemicomonad F
open import Presheaf.Hom C.cat
open C hiding (Obj)
open ‚ñ° using () renaming (run to ‚ñ° ; cojoin to quot)

module setup
  (u : C.Obj) -- universe of small types
  (ùüôu : ùüô ~> u) -- ùüô is a small type
  {p} (is-small : C.Obj -> Type p)
  (s : C.Obj) -- ‚àÉ[ s' ‚àà C.Obj (small) ] (s' ~> u)
  (if_‚®æproj1-dec-eq-‚ñ°_then_‚®æproj2-else_
    : ‚àÄ {a} -> (a ~> s) -> (sv : C.Obj) -> (a ~> ‚ñ° sv) -> (a ~> u) -> (a ~> u))
  (pair-s : ‚àÄ (v : C.Obj) -> is-small v -> (v ~> u) -> (ùüô ~> s))
  (‚ñ°-small : ‚àÄ {a} -> is-small (‚ñ° a))
  where

  pack : (‚ñ° s ~> u) -> ùüô ~> ‚ñ° s
  pack t = ‚ñ°.ùüô-codistr ‚®æ ‚ñ°.map (pair-s (‚ñ° s) ‚ñ°-small t)

  private module loopy-setup = lob.setup u s pack
  open loopy-setup public using (Fixpoint ; introspect ; module notations)
  open notations

  unpack : (s √ó ‚ñ° s) ~> u
  unpack = if getl ‚®æproj1-dec-eq-‚ñ° s then
              getr ‚®æproj2-else
              (* ‚®æ ùüôu)

  module conditions
    (dec-eq-true : ‚àÄ {a a‚Ä≤} {f : a ~> s} {sv : C.Obj} {g : a ~> ‚ñ° sv} {h : a ~> u} {small-pf : is-small (‚ñ° sv)} {j : a‚Ä≤ ~> a} {k : ‚ñ° sv ~> u}
      -> ((j ‚®æ f) ‚âà (* ‚®æ pair-s (‚ñ° sv) small-pf k))
      -> (j ‚®æ if f ‚®æproj1-dec-eq-‚ñ° sv then g ‚®æproj2-else h) ‚âà (j ‚®æ (g ‚®æ k)))
    (f : ‚ñ° u ~> u)
    where

    unpack-point-surjection : ‚àÄ {f : ‚ñ° s ~> u} {g : ùüô ~> ‚ñ° (‚ñ° s)}
        -> (dup ‚®æ ((pack f √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack))) ‚âà (g ‚®æ ‚ñ°.map f)
    unpack-point-surjection {f} {g}
      =  (dup ‚®æ ((pack f √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack)))                                                      =[ _ ^‚®æ‚Ä≤ ((Œπ‚ÇÇ √ó√ó‚Ä≤ (√∑‚ÇÇ ((_ ^‚®æ‚Ä≤ ‚ñ°.mapŒπ) ‚®æ‚ÇÇ ‚®æŒπ))) ‚®æ‚Ä≤^ _) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((pack f √ó√ó (g ‚®æ ‚ñ°.map Œπ)) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack)))                                          =[ _ ^‚®æ‚Ä≤ (√∑‚ÇÇ (‚®æ‚®æ ‚®æ‚ÇÇ (√ó√ó‚®æ ‚®æ‚Ä≤^ _))) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ ((‚ñ°.map (pair-s (‚ñ° s) ‚ñ°-small f) √ó√ó ‚ñ°.map Œπ) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map unpack)))) =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ ‚®æ‚®æ) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ (((‚ñ°.map (pair-s (‚ñ° s) ‚ñ°-small f) √ó√ó ‚ñ°.map Œπ) ‚®æ ‚ñ°.√ó-codistr) ‚®æ ‚ñ°.map unpack))) =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ (‚ñ°.√ó√ó-codistr ‚®æ‚Ä≤^ _)) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ ((‚ñ°.√ó-codistr ‚®æ ‚ñ°.map (pair-s (‚ñ° s) ‚ñ°-small f √ó√ó Œπ)) ‚®æ ‚ñ°.map unpack)))         =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ ((√∑‚ÇÇ ‚®æ‚®æ) ‚®æ‚ÇÇ (_ ^‚®æ‚Ä≤ ‚ñ°.map‚®æ))) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map ((pair-s (‚ñ° s) ‚ñ°-small f √ó√ó Œπ) ‚®æ unpack))))               =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ ‚ñ°.map‚Ä≤ (dec-eq-true (getl‚®æ ‚®æ‚ÇÇ (*‚Ä≤ ‚®æ‚Ä≤^ _))))) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map ((pair-s (‚ñ° s) ‚ñ°-small f √ó√ó Œπ) ‚®æ (getr ‚®æ f)))))           =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ ‚ñ°.map‚Ä≤ (‚®æ‚®æ ‚®æ‚ÇÇ (getr‚®æ ‚®æ‚Ä≤^ _)))) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map ((getr ‚®æ Œπ) ‚®æ f))))                                       =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ ‚ñ°.map‚Ä≤ (‚®æŒπ ‚®æ‚Ä≤^ _))) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ (‚ñ°.√ó-codistr ‚®æ ‚ñ°.map (getr ‚®æ f))))                                             =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ ((_ ^‚®æ‚Ä≤ √∑‚ÇÇ ‚ñ°.map‚®æ) ‚®æ‚ÇÇ ‚®æ‚®æ)) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ ((‚ñ°.√ó-codistr ‚®æ ‚ñ°.map getr) ‚®æ ‚ñ°.map f)))                                       =[ _ ^‚®æ‚Ä≤ (_ ^‚®æ‚Ä≤ (‚ñ°.√ó-codistr-getr ‚®æ‚Ä≤^ _)) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ (getr ‚®æ ‚ñ°.map f)))                                                             =[ _ ^‚®æ‚Ä≤ ‚®æ‚®æ ]=
      ‚®æ‚ÇÇ (dup ‚®æ (((‚ñ°.ùüô-codistr √ó√ó g) ‚®æ getr) ‚®æ ‚ñ°.map f))                                                             =[ _ ^‚®æ‚Ä≤ ((getr‚®æ ‚®æ‚Ä≤^ _)) ]=
      ‚®æ‚ÇÇ (dup ‚®æ ((getr ‚®æ g) ‚®æ ‚ñ°.map f))                                                                              =[ (_ ^‚®æ‚Ä≤ √∑‚ÇÇ ‚®æ‚®æ) ‚®æ‚ÇÇ ‚®æ‚®æ ]=
      ‚®æ‚ÇÇ ((dup ‚®æ getr) ‚®æ (g ‚®æ ‚ñ°.map f))                                                                              =[ dup-getr ‚®æ‚Ä≤^ _ ]=
      ‚®æ‚ÇÇ (Œπ ‚®æ (g ‚®æ ‚ñ°.map f))                                                                                         =[ Œπ‚®æ ]=
      ‚®æ‚ÇÇ (g ‚®æ ‚ñ°.map f)                                                                                                [‚ñ†]

    private module loopy-conditions = loopy-setup.conditions unpack unpack-point-surjection f
    open loopy-conditions public using (key ; key-law ; t ; fixpt)
